//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/Space.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Space: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Space()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Space"",
    ""maps"": [
        {
            ""name"": ""Challenge"",
            ""id"": ""5d604e14-62ca-4e77-8e98-b50e12f6184a"",
            ""actions"": [
                {
                    ""name"": ""Scace"",
                    ""type"": ""Value"",
                    ""id"": ""0ed9f7f3-fa46-49ba-9d29-fa3838ebf8d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4038b8aa-b618-476a-87c6-1cb2cc035fa3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Scace"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Challenge
        m_Challenge = asset.FindActionMap("Challenge", throwIfNotFound: true);
        m_Challenge_Scace = m_Challenge.FindAction("Scace", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Challenge
    private readonly InputActionMap m_Challenge;
    private List<IChallengeActions> m_ChallengeActionsCallbackInterfaces = new List<IChallengeActions>();
    private readonly InputAction m_Challenge_Scace;
    public struct ChallengeActions
    {
        private @Space m_Wrapper;
        public ChallengeActions(@Space wrapper) { m_Wrapper = wrapper; }
        public InputAction @Scace => m_Wrapper.m_Challenge_Scace;
        public InputActionMap Get() { return m_Wrapper.m_Challenge; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChallengeActions set) { return set.Get(); }
        public void AddCallbacks(IChallengeActions instance)
        {
            if (instance == null || m_Wrapper.m_ChallengeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ChallengeActionsCallbackInterfaces.Add(instance);
            @Scace.started += instance.OnScace;
            @Scace.performed += instance.OnScace;
            @Scace.canceled += instance.OnScace;
        }

        private void UnregisterCallbacks(IChallengeActions instance)
        {
            @Scace.started -= instance.OnScace;
            @Scace.performed -= instance.OnScace;
            @Scace.canceled -= instance.OnScace;
        }

        public void RemoveCallbacks(IChallengeActions instance)
        {
            if (m_Wrapper.m_ChallengeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IChallengeActions instance)
        {
            foreach (var item in m_Wrapper.m_ChallengeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ChallengeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ChallengeActions @Challenge => new ChallengeActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IChallengeActions
    {
        void OnScace(InputAction.CallbackContext context);
    }
}
